1. Nova Poshta addresses adjusted.
2. Deletion of garbage records in delivery address tables added when Nova Poshta records are refreshed.
3. Bug with empty customer name on orders page fixed. Include didn't work. Problem was = new() in Order class for
TheCustomer property. Just remove it.






select count(*) from WarehouseTypes;
select count(*) from Regions;
select count(*) from Cities;
select count(*) from Warehouses;

5
25
9835
28167







if (deliveryTypeId == @DeliveryType.NovaPoshtaWarehouseId) {




            foreach ( var order in orders )
            {
                _context.Entry( order ).Reference( o => o.TheCustomer ).Load();
            }

            foreach ( var order in orders )
            {
                order.TheCustomer = await _context.Customers
                    .FirstOrDefaultAsync( c => c.Id == order.TheCustomer.Id );
            }



@Html.DisplayNameFor( model => model.TheCustomer.FullName )
@Html.DisplayNameFor( model => model.OrderDateTime )
@Html.DisplayNameFor( model => model.Id )














        public override async Task<List<City>> GetCitiesByRegionAsync(string regionIdExternal)
        {
            List<City> result = new List<City>();
            JsonArray itemArray = null;
            string requestText =
$@"
{{
	""apiKey"": ""{ApiKey}"",
	""modelName"": ""Address"",
	""calledMethod"": ""getCities"",
	""methodProperties"": {{}}
}}
";
            string jsonAsString = await GetJsonString( requestText );
            var jsonValue = JsonNode.Parse( jsonAsString ).AsObject();
            itemArray = jsonValue["data"].AsArray();
            foreach (var item in itemArray)
            {
                // to-do: it's bad to fetch and then filter, should be done by request parameters
                if (item.AsObject()["Area"].ToString() == regionIdExternal)
                {
                    result.Add( new City
                    {
                        IdExternal = (string)item.AsObject()["Ref"],
                        Name = (string)item.AsObject()["Description"],
                        TypeDescription = (string)item.AsObject()["SettlementTypeDescription"],                        
                        RegionIdExternal = (string)item.AsObject()["Area"],
                        RawJson = item.ToString()
                    } );
                }
            }
            return result;
        }


        public override async Task<List<Warehouse>> GetWarehousesByCityAsync(string cityIdExternal)
        {
            // todo: it's bad to fetch and then filter, but it's a quick solution
            const string WAREHOUSE_TYPE_OFFICE_30KG_REF = "841339c7-591a-42e2-8233-7a0a00f0ed6f";
            const string WAREHOUSE_TYPE_OFFICE_1000KG_REF = "9a68df70-0267-42a8-bb5c-37f427e36ee4";
            List<Warehouse> result = new List<Warehouse>();
            int pageNumber = 1;
            int safeGuardCounter = 0;
            JsonArray itemArray = null;
            do
            {
                string requestText =
$@"
{{
""apiKey"": ""{ApiKey}"",
""modelName"": ""Address"",
""calledMethod"": ""getWarehouses"",
""methodProperties"": {{
""FindByString"" : """",
""CityName"" : """",
""CityRef"" : ""{cityIdExternal}"",
""Page"" : ""{pageNumber}"",
""Limit"" : """",
""Language"" : ""UA"",
""TypeOfWarehouseRef"" : """",
""WarehouseId"" : """"
   }}
}}
";
                string jsonAsString = await GetJsonString( requestText );
                var jsonValue = JsonNode.Parse( jsonAsString ).AsObject();
                itemArray = jsonValue["data"].AsArray();
                foreach (var item in itemArray)
                {
                    bool isOffice30Kg = item.AsObject()["TypeOfWarehouse"].ToString() == WAREHOUSE_TYPE_OFFICE_30KG_REF;
                    bool isOffice1000Kg = item.AsObject()["TypeOfWarehouse"].ToString() == WAREHOUSE_TYPE_OFFICE_1000KG_REF;
                    //if (isOffice30Kg || isOffice1000Kg)
                    //{
                        result.Add( new Warehouse
                        {
                            IdExternal = item.AsObject()["Ref"].ToString(),
                            Name = item.AsObject()["Description"].ToString(),
                            WarehouseTypeIdExternal = item.AsObject()["TypeOfWarehouse"].ToString(),
                            CityIdExternal = item.AsObject()[ "CityRef" ].ToString(),
                            RawJson = item.ToString()
                        } );
                    //}
                }
                pageNumber++;
                safeGuardCounter++;
                if (safeGuardCounter > _CRITICAL_GUARD_VALUE)
                {
                    break;
                }
            }
            while (itemArray.Count > 0);
            return result;
        }


public abstract Task<List<City>> GetCitiesByRegionAsync(string regionIdExternal);
public abstract Task<List<Warehouse>> GetWarehousesByCityAsync(string cityIdExternal);
]

